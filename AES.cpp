/*
 * AES.cpp
 *
 *  Created on: 16/04/2017
 *      Author: ATPNguyen
 */

#include "AES.h"
#include <fstream>
#include <cstdlib>

// look-up table for Rcon array in Key Expansion, source: wikipedia.org
const byte Rcon [0x100] =
	{
	    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
	};

// S-box for SubByte layers, source: wikipedia.org
const byte s_fwd [0x100] =
	{
	  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
	};

// Galois multiplication look-up table for MixColumn layer, source: wikipedia.org
const byte gal_2 [0x100]={
		0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
		0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
		0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
		0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
		0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
		0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
		0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
		0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
		0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
		0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
		0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
		0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
		0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
		0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
		0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
		0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
	};

// Galois multiplication look-up table for MixColumn layer, source: wikipedia.org
const byte gal_3 [0x100]={
		0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
		0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
		0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
		0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
		0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
		0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
		0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
		0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
		0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
		0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
		0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
		0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
		0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
		0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
		0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
		0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
	};

AES::AES(int keylen)
{
	// choose operating mode; only 128-bit covered so far
	switch (keylen)
	{
	case 128:
		nKey = 4; // 10 rounds
		nRound = 10 ;
		break;
	case 192:
		nKey = 6; // 12 rounds
		nRound = 12 ;
		break;
	case 256:
		nKey = 8; // 14 rounds
		nRound = 14 ;
		break;
	default:
		throw "Invalid AES key size";
	}

	nBlock = 4;
}

AES::~AES(){

}

void AES::SubBytes(byte** state){
	int u_temp;
	int l_temp;

	// read from s-box
	for(int i = 0; i<4; i++){
		for(int j = 0; j<4; j++){
			l_temp = (int)state[i][j] & 0b00001111;	//read low nibble
			u_temp = (int)state[i][j]>>4;	// read high nibble

			state[i][j] = s_fwd[u_temp*16+l_temp];	//substitute with value from S-box
		}
	}
}
void AES::ShiftRows(byte** state){
	byte tmp;

	// 2nd row; left-shift once
	tmp = state[1][0];
	for(int i=0; i<3; i++){
		state[1][i] = state[1][i+1];
	}
	state[1][3] = tmp;

	// 3rd row; lift_shift twice == switch 1&3 and 2&4
	for(int i=0; i<2; i++){
		tmp = state[2][i];
		state[2][i] = state[2][i+2];
		state[2][i+2] = tmp;
	}

	// 4th row; left-shift thrice == right-shift once
	tmp = state[3][3];
	for(int i=3; i>0; i--){
		state[3][i] = state[3][i-1];
	}
	state[3][0] = tmp;
}
void AES::MixColumns(byte** state){
	byte tmp[4];

	// perform Galois multiplication for each column element according to a fixed matrix:
	/*	m=[ 2	3	1	1
	 * 		1	2	3	1
	 * 		1	1	2	3
	 * 		3	1	1	2  ]
	 */
	for(int i = 0; i<4; i++){
		tmp[0] = gal_2[state[0][i]] ^ gal_3[state[1][i]] ^ state[2][i] ^ state[3][i];
		tmp[1] = state[0][i] ^ gal_2[state[1][i]] ^ gal_3[state[2][i]] ^ state[3][i];
		tmp[2] = state[0][i] ^ state[1][i] ^ gal_2[state[2][i]] ^ gal_3[state[3][i]];
		tmp[3] = gal_3[state[0][i]] ^ state[1][i] ^ state[2][i] ^ gal_2[state[3][i]];

		state[0][i] = tmp[0];
		state[1][i] = tmp[1];
		state[2][i] = tmp[2];
		state[3][i] = tmp[3];
	}
}
void AES::AddRoundKey(byte** state, byte* w, int start){
	for(int i = 0; i<4; i++){
		for(int j = 0; j<4; j++){
			state[j][i] = w[4*start+4*i+j]^state[j][i]; // byte-wise XOR with current round key
		}
	}
}

void AES::SubWord(byte* word){
	int u_temp;
	int l_temp;

	// read from s-box
	for(int i = 0; i < 4; i++){
		l_temp = (int)word[i] & 0b00001111;	// read low nibble
		u_temp = (int)word[i]>>4;	// read high nibble

		word[i] = s_fwd[u_temp*16+l_temp];	//substitute with value from S-box
	}
}

void AES::RotWord(byte* word){
	byte temp;

	// left-shift row byte-wise once
	temp = word[0];
	word[0] = word[1];
	word[1] = word[2];
	word[2] = word[3];
	word[3] = temp;
}

void AES::KeyExpansion(byte* key, byte* w, int nKey)
{
	byte temp[4];

	int i = 0;
	while(i<nKey){
		w[i*4] =  key[4*i]; // first four 32-bit blocks copy input key directly
		w[i*4+1] = key[4*i+1];
		w[i*4+2] = key[4*i+2];
		w[i*4+3] = key[4*i+3];
		i += 1;
	}
	for(i = nKey; i < nBlock*(nRound+1); i++){
		temp[0] = w[4*(i-1)];
		temp[1] = w[4*(i-1)+1];
		temp[2] = w[4*(i-1)+2];
		temp[3] = w[4*(i-1)+3];
		if(i % nKey == 0){	// perform every 4th 32-bit block...
			RotWord(temp);	// byte-wise rotation
			SubWord(temp);	// substitution using S-box
			temp[0] = temp[0]^Rcon[i/nKey];	// XOR left-most byte with Rcon-element
		}
		else if (nKey > 6 && (i % nKey == 4)){	// this is for AES-192 and AES-256
			SubWord(temp);
		}

		w[4*i] = w[4*(i-nKey)]^temp[0];	// XOR with a previous 32-bit block...
		w[4*i+1] = w[4*(i-nKey)+1]^temp[1];
		w[4*i+2] = w[4*(i-nKey)+2]^temp[2];
		w[4*i+3] = w[4*(i-nKey)+3]^temp[3];
	}
}

void AES::Cipher (byte* in, byte* out, byte* w)
{
	// save input block into internal work array state
	byte** state = new byte*[4];
	for(int i = 0; i < 4; i++){
		state[i] = new byte[nBlock];
	}
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			state[j][i] = in[i*nBlock + j]; // read plaintext into state matrix
		}
	}

	AddRoundKey(state, w, 0); // initial round
	for(int round = 1; round < nRound; round++){ // for nRound-1 times, perform ...
		SubBytes(state); // substitution
		ShiftRows(state); // rotation
		MixColumns(state); // another substitution
		AddRoundKey(state, w, round*nBlock); // XOR with round key
	}
	SubBytes(state);	// last round is the same but without MixColumn layer
	ShiftRows(state);
	AddRoundKey(state, w, nRound*nBlock);

	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			out[i*nBlock + j] = state[j][i]; // output ciphertext
		}
	}

	// delete arrays from heap
	for(int i = 0; i < 4; i++)
		delete[] state[i];
	delete[] state;
}
